package main
import (
        "os/exec"  	
	"fmt"
	"log"
	"strings"
)

func main() {
    // 创建映射
	ages := make(map[string]int)

	// 添加键值对
	ages["Alice"] = 25
	ages["Bob"] = 30

	// 更新键值对
	ages["Alice"] = 26

	// 访问键值对
	fmt.Println("Alice's age:", ages["Alice"])  // 输出: Alice's age: 26

	// 检查键是否存在
	if age, ok := ages["Charlie"]; ok {
        fmt.Println("Charlie's age:", age)
	} else {
	    fmt.Println("Charlie not found")  // 输出: Charlie not found
	}

	// 删除键值对
	delete(ages, "Bob")

	// 遍历映射
	for name, age := range ages {
	    fmt.Printf("%s is %d years old\n", name, age)
    	}



	//cmd := exec.Command("sinfo", "-h", "-N", "-O", "NodeList,AllocMem,Memory,CPUsState,StateLong") 
        //cmd := exec.Command("nvidia-smi","pmon","-s","u","-c","1","|","grep","1792215","|","awk","'{print $4}'")

        arr := [3]int{1875599, 1792975, 1792116}
	// 循环执行命令并输出结果
	for _, i := range arr {
	    // 构建并执行复杂的 shell 命令
	    cmd := exec.Command("sh", "-c", fmt.Sprintf("nvidia-smi pmon -s u -c 1 | grep %d | awk '{print $1}'", i))
	    
	    // 获取命令的输出
	    output, err := cmd.Output()
	    if err != nil {
		log.Fatalf("Failed to execute command: %s", err)
	    }

	    // 将输出按行拆分并打印
	    outputStr := string(output)
	    lines := strings.Split(outputStr, "\n")
	    for _, line := range lines {
		// 打印非空行
		if len(strings.TrimSpace(line)) > 0 {
		    fmt.Println(line)
		}
       	    }

            cmd := exec.Command("sh", "-c", fmt.Sprintf("nvidia-smi pmon -s u -c 1 | grep %d | awk '{print $4}'", i))

            // 获取命令的输出
            output, err := cmd.Output()
            if err != nil {
                log.Fatalf("Failed to execute command: %s", err)
            }

            // 将输出按行拆分并打印
            outputStr := string(output)
            lines := strings.Split(outputStr, "\n")
            for _, line := range lines {
                // 打印非空行
                if len(strings.TrimSpace(line)) > 0 {
                    fmt.Println(line)
                }
            }


	}
}
